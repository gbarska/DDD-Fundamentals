// <auto-generated />
using System;
using ClientPatientManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClientPatientManagement.Data.Migrations
{
    [DbContext(typeof(CrudContext))]
    partial class CrudContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ClientPatientManagement.Core.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FullName");

                    b.Property<int?>("PreferredDoctorId");

                    b.Property<string>("PreferredName");

                    b.Property<string>("Salutation");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Steve Smith",
                            PreferredDoctorId = 1,
                            PreferredName = "Steve",
                            Salutation = "Mr."
                        });
                });

            modelBuilder.Entity("ClientPatientManagement.Core.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dr. Smith"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dr. Who"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dr. McDreamy"
                        });
                });

            modelBuilder.Entity("ClientPatientManagement.Core.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int>("Gender");

                    b.Property<string>("Name");

                    b.Property<int?>("PreferredDoctorId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Gender = 2,
                            Name = "Darwin"
                        });
                });

            modelBuilder.Entity("ClientPatientManagement.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Exam Room 1"
                        });
                });

            modelBuilder.Entity("ClientPatientManagement.Core.Model.Patient", b =>
                {
                    b.HasOne("ClientPatientManagement.Core.Model.Client", "Owner")
                        .WithMany("Patients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
